                       | /* $begin code-yso */
                       | /* $begin code-ysa */
                       | # Execution begins at address 0 
  0x0000:              | 	.pos 0 
  0x0000:30f400010000  | init:	irmovl Stack, %esp  	# Set up stack pointer  
  0x0006:30f500010000  | 	irmovl Stack, %ebp  	# Set up base pointer   
  0x000c:8024000000    | 	call Main		# Execute main program
  0x0011:00            | 	halt			# Terminate program 
                       | 
                       | # Array of 4 elements
  0x0014:              | 	.align 4 	
  0x0014:0d000000      | array:	.long 0xd
  0x0018:c0000000      | 	.long 0xc0
  0x001c:000b0000      | 	.long 0xb00
  0x0020:00a00000      | 	.long 0xa000	
                       | 
  0x0024:a05f          | Main:	pushl %ebp 
  0x0026:2045          | 	rrmovl %esp,%ebp
  0x0028:30f004000000  | 	irmovl $4,%eax	
  0x002e:a00f          | 	pushl %eax		# Push 4
  0x0030:30f214000000  | 	irmovl array,%edx
  0x0036:a02f          | 	pushl %edx      	# Push array
  0x0038:8042000000    | 	call Sum		# Sum(array, 4)
  0x003d:2054          | 	rrmovl %ebp,%esp
  0x003f:b05f          | 	popl %ebp
  0x0041:90            | 	ret 
                       | 
                       | /* $begin sum-ys 0 */
                       | 	# int Sum(int *Start, int Count)
  0x0042:a05f          | Sum:	pushl %ebp
  0x0044:2045          | 	rrmovl %esp,%ebp
  0x0046:501508000000  | 	mrmovl 8(%ebp),%ecx 	# ecx = Start
  0x004c:50250c000000  | 	mrmovl 12(%ebp),%edx	# edx = Count
  0x0052:6300          | 	xorl %eax,%eax		# sum = 0
  0x0054:6222          | 	andl   %edx,%edx	# Set condition codes
  0x0056:7378000000    | 	je     End
  0x005b:506100000000  | Loop:	mrmovl (%ecx),%esi	# get *Start
  0x0061:6060          | 	addl %esi,%eax          # add to sum
  0x0063:30f304000000  | 	irmovl $4,%ebx          # 
  0x0069:6031          | 	addl %ebx,%ecx          # Start++
  0x006b:30f3ffffffff  | 	irmovl $-1,%ebx	        # 
  0x0071:6032          | 	addl %ebx,%edx          # Count--
  0x0073:745b000000    | 	jne    Loop             # Stop when 0
  0x0078:2054          | End:	rrmovl %ebp,%esp
  0x007a:b05f          | 	popl %ebp
  0x007c:90            | 	ret
                       | /* $end sum-ys 0 */
                       | 
                       | # The stack starts here and grows to lower addresses
  0x0100:              | 	.pos 0x100		
  0x0100:              | Stack:	 
                       | /* $end code-ysa */
                       | /* $end code-yso */
