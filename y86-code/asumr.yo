                       | # Execution begins at address 0
  0x0000:              | 	.pos 0
  0x0000:30f400040000  | init:	irmovl Stack, %esp  	# Set up Stack pointer
  0x0006:30f500040000  | 	irmovl Stack, %ebp  	# Set up base pointer
  0x000c:7024000000    | 	jmp Main		# Execute main program
                       | 
                       | # Array of 4 elements
  0x0014:              | 	.align 4
  0x0014:0d000000      | array:	.long 0xd
  0x0018:c0000000      | 	.long 0xc0
  0x001c:000b0000      | 	.long 0xb00
  0x0020:00a00000      | 	.long 0xa000
                       | 
  0x0024:30f004000000  | Main:	irmovl $4,%eax
  0x002a:a00f          | 	pushl %eax	# Push 4
  0x002c:30f214000000  | 	irmovl array,%edx
  0x0032:a02f          | 	pushl %edx      # Push array
  0x0034:803a000000    | 	call rSum	# Sum(array, 4)
  0x0039:00            | 	halt
                       | 
                       | /* $begin rsum-ys */
                       | 	# int Sum(int *Start, int Count)
  0x003a:a05f          | rSum:	pushl %ebp
  0x003c:2045          | 	rrmovl %esp,%ebp
  0x003e:a03f          | 	pushl %ebx           # Save value of %ebx
  0x0040:503508000000  | 	mrmovl 8(%ebp),%ebx  # Get Start
  0x0046:50050c000000  | 	mrmovl 12(%ebp),%eax # Get Count
  0x004c:6200          | 	andl %eax,%eax       # Test value of Count
  0x004e:717b000000    | 	jle L38              # If <= 0, goto zreturn
  0x0053:30f2ffffffff  | 	irmovl $-1,%edx
  0x0059:6020          | 	addl %edx,%eax       # Count--
  0x005b:a00f          | 	pushl %eax           # Push Count
  0x005d:30f204000000  | 	irmovl $4,%edx
  0x0063:2030          | 	rrmovl %ebx,%eax
  0x0065:6020          | 	addl %edx,%eax       
  0x0067:a00f          | 	pushl %eax           # Push Start+1
  0x0069:803a000000    | 	call rSum            # Sum(Start+1, Count-1)
  0x006e:502300000000  | 	mrmovl (%ebx),%edx
  0x0074:6020          | 	addl %edx,%eax       # Add *Start
  0x0076:707d000000    | 	jmp L39              # goto done
  0x007b:6300          | L38:	xorl %eax,%eax       # zreturn:
  0x007d:5035fcffffff  | L39:	mrmovl -4(%ebp),%ebx # done: Restore %ebx
  0x0083:2054          | 	rrmovl %ebp,%esp     # Deallocate stack frame
  0x0085:b05f          | 	popl %ebp            # Restore %ebp
  0x0087:90            | 	ret
                       | /* $end rsum-ys */
  0x0400:              | 	.pos 0x400
  0x0400:              | Stack:	# The stack goes here
