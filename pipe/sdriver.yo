                       | #######################################################################
                       | # Test for copying block of size 4;
                       | #######################################################################
  0x0000:              | 	.pos 0
  0x0000:30f408010000  | main:	irmovl Stack, %esp  	# Set up stack pointer
  0x0006:30f508010000  | 	irmovl Stack, %ebp  	# Set up base pointer
                       | 
                       | 	# Set up arguments for copy function and then invoke it
  0x000c:30f004000000  | 	irmovl $4, %eax		# src and dst have 4 elements
  0x0012:a00f          | 	pushl %eax
  0x0014:30f0b4000000  | 	irmovl dest, %eax	# dst array
  0x001a:a00f          | 	pushl %eax
  0x001c:30f090000000  | 	irmovl src, %eax	# src array
  0x0022:a00f          | 	pushl %eax
  0x0024:802a000000    | 	call ncopy		 
  0x0029:00            | 	halt			# should halt with num nonzeros in %eax
  0x002a:              | StartFun:
                       | #/* $begin ncopy-ys */
                       | ##################################################################
                       | # ncopy.ys - Copy a src block of len ints to dst.
                       | # Return the number of positive ints (>0) contained in src.
                       | #
                       | # Include your name and ID here.
                       | #
                       | # Describe how and why you modified the baseline code.
                       | #
                       | ##################################################################
                       | # Do not modify this portion
                       | # Function prologue.
  0x002a:a05f          | ncopy:	pushl %ebp		# Save old frame pointer
  0x002c:2045          | 	rrmovl %esp,%ebp	# Set up new frame pointer
  0x002e:a06f          | 	pushl %esi		# Save callee-save regs
  0x0030:a03f          | 	pushl %ebx
  0x0032:a07f          | 	pushl %edi
  0x0034:503508000000  | 	mrmovl 8(%ebp),%ebx	# src
  0x003a:502510000000  | 	mrmovl 16(%ebp),%edx	# len
  0x0040:50150c000000  | 	mrmovl 12(%ebp),%ecx	# dst
                       | 
                       | ##################################################################
                       | # You can modify this portion
                       | 	# Loop header
  0x0046:6300          | 	xorl %eax,%eax		# count = 0;
  0x0048:6222          | 	andl %edx,%edx		# len <= 0?
  0x004a:7183000000    | 	jle Done		# if so, goto Done:
                       | 
  0x004f:506300000000  | Loop:	mrmovl (%ebx), %esi	# read val from src...
  0x0055:406100000000  | 	rmmovl %esi, (%ecx)	# ...and store it to dst
  0x005b:6266          | 	andl %esi, %esi		# val <= 0?
  0x005d:716a000000    | 	jle Npos		# if so, goto Npos:
  0x0062:30f701000000  | 	irmovl $1, %edi
  0x0068:6070          | 	addl %edi, %eax		# count++
  0x006a:30f701000000  | Npos:	irmovl $1, %edi
  0x0070:6172          | 	subl %edi, %edx		# len--
  0x0072:30f704000000  | 	irmovl $4, %edi
  0x0078:6073          | 	addl %edi, %ebx		# src++
  0x007a:6071          | 	addl %edi, %ecx		# dst++
  0x007c:6222          | 	andl %edx,%edx		# len > 0?
  0x007e:764f000000    | 	jg Loop			# if so, goto Loop:
                       | ##################################################################
                       | # Do not modify the following section of code
                       | # Function epilogue.
  0x0083:              | Done:
  0x0083:b07f          | 	popl %edi               # Restore callee-save registers
  0x0085:b03f          | 	popl %ebx
  0x0087:b06f          | 	popl %esi
  0x0089:2054          | 	rrmovl %ebp, %esp
  0x008b:b05f          | 	popl %ebp
  0x008d:90            | 	ret
                       | ##################################################################
                       | # Keep the following label at the end of your function
  0x008e:              | End:
                       | #/* $end ncopy-ys */
  0x008e:              | EndFun:
                       | 
                       | ###############################
                       | # Source and destination blocks 
                       | ###############################
  0x0090:              | 	.align 4
  0x0090:              | src:
  0x0090:ffffffff      | 	.long -1
  0x0094:feffffff      | 	.long -2
  0x0098:03000000      | 	.long 3
  0x009c:04000000      | 	.long 4
  0x00a0:fadebc00      | 	.long 0xbcdefa # This shouldn't get moved
                       | 
  0x00b0:              | 	.align 16
  0x00b0:              | Predest:
  0x00b0:fadebc00      | 	.long 0xbcdefa
  0x00b4:              | dest:
  0x00b4:abefcd00      | 	.long 0xcdefab
  0x00b8:abefcd00      | 	.long 0xcdefab
  0x00bc:abefcd00      | 	.long 0xcdefab
  0x00c0:abefcd00      | 	.long 0xcdefab
  0x00c4:              | Postdest:
  0x00c4:bcfade00      | 	.long 0xdefabc
                       | 
  0x00c8:              | .align 4
                       | # Run time stack
  0x00c8:00000000      | 	.long 0
  0x00cc:00000000      | 	.long 0
  0x00d0:00000000      | 	.long 0
  0x00d4:00000000      | 	.long 0
  0x00d8:00000000      | 	.long 0
  0x00dc:00000000      | 	.long 0
  0x00e0:00000000      | 	.long 0
  0x00e4:00000000      | 	.long 0
  0x00e8:00000000      | 	.long 0
  0x00ec:00000000      | 	.long 0
  0x00f0:00000000      | 	.long 0
  0x00f4:00000000      | 	.long 0
  0x00f8:00000000      | 	.long 0
  0x00fc:00000000      | 	.long 0
  0x0100:00000000      | 	.long 0
  0x0104:00000000      | 	.long 0
                       | 
  0x0108:              | Stack:
